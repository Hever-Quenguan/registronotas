"""
Django settings for aplicacion project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url


# Leer el archivo .env

from dotenv import load_dotenv
load_dotenv() 
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-v$#=rcurzw3h=zb-_argj5$=n(0m+j6g&17%(b#4b4s5^zg&2r'
CORS_ALLOW_ALL_ORIGINS = True

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Django REST Framework y Swagger
    'rest_framework',
    'drf_spectacular',
    'oauth2_provider',
    

    # Tu app
    'api',
    'corsheaders',  # Habilitar CORS

    # Autenticación con Keycloak
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.openid_connect',
    'mozilla_django_oidc',
]

SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIALACCOUNT_PROVIDERS = {
    'openid_connect': {
        'SERVERS': {
            'keycloak': {
                'CLAIMS_ENDPOINT': 'http://localhost:8080/realms/NotasRealm/protocol/openid-connect/userinfo',
                'ISSUER': 'http://localhost:8080/realms/NotasRealm',
                'AUTH_ENDPOINT': 'http://localhost:8080/realms/NotasRealm/protocol/openid-connect/auth',
                'TOKEN_ENDPOINT': 'http://localhost:8080/realms/NotasRealm/protocol/openid-connect/token',
                'USERINFO_ENDPOINT': 'http://localhost:8080/realms/NotasRealm/protocol/openid-connect/userinfo',
                'CLIENT_ID': 'django-api',
                'SECRET': '7doxFQtwfRRlqMvdaq8KDa2bBQX2cx9a',
            }
        }
    }
}


MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # CORS debe ir antes de CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]


ROOT_URLCONF = 'aplicacion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aplicacion.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
      'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv('POSTGRES_DB', 'notas'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', '1234'),
        'HOST': os.getenv('POSTGRES_HOST', 'db'),  
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'aplicacion.authentication.KeycloakJWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

from datetime import timedelta

from datetime import timedelta

SIMPLE_JWT = {
    'ALGORITHM': 'RS256',
    'SIGNING_KEY': None,
    'VERIFYING_KEY': '''-----BEGIN CERTIFICATE-----
MIICozCCAYsCBgGW6x3WzjANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDApOb3Rh
c1JlYWxtMB4XDTI1MDUyMDAwMzM0M1oXDTM1MDUyMDAwMzUyM1owFTETMBEGA1UE
AwwKTm90YXNSZWFsbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALAN
BdYj48Rwo81eFHOin2U8sTwg3rtMq/+/PfLThZA+BuGk46UDFtpd0ymu6M6DgD8Z
yCXHwY/nh5yTdldUtJIUjg0vaivvxwnrO5o7lRSVMcA0S4DdbpbDB9O7o1F5LcjJ
W3ppk4ZVdfv3dWDtj/wCmTgwjj9w4zyOBQQh0bQwaGUlH/MAOJgjFn6eL+RI9iKw
XiwBA9AWwTKTfMR7avqnsMh4vXG5g+cmy1HlSkr5TWWC4+2oQTkU5hehcCYurFyX
BOvTBNlpLPGUgqmsZKZdAPEsOSjP57gBV7KEFur4EK7PTG6PVKWM/UCpZSBm4ckq
kUGJMQITkFtOrnvHRNECAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAEqAPwExVuxrc
OHizLuHJYjLGLotMvy76Am4YResp35q3kN49nknO6ASclTmtGwFhRFXDF+UfhFVb
wzAAr6E/q3qKuwREzca03A1bT37XnO3YrXQNw5UvgW1/fc0qwvjbFw8yDyWwaJj5
u2uMstA93vKh0KoUxPzP6VmOF5puzojo4pcvUWudJGoDLnRCCZhguehHK+txb+F9
h0uE73R/buL4z8lT52vm8+z3r2Fc9OUOXAA6Vo9wgryvMZlpjhtY9eX/hHdmLrBl
8IF2CE861WS3u3ldduMp2iPZJWaOuycalt9cIrblJHN4Ik0PtMV65EuTxc+Xsh5C
ltDvzrI1AQ==
-----END CERTIFICATE-----''',
    'AUDIENCE': 'account',
    'ISSUER': 'http://localhost:8080/realms/NotasRealm',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Notas API',
    'DESCRIPTION': 'Documentación de la API de Notas con autenticación Keycloak.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SECURITY': [{'BearerAuth': []}],
    'COMPONENTS': {
        'securitySchemes': {
            'BearerAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    }
}

KEYCLOAK_REALM = "NotasRealm"
KEYCLOAK_HOST = "http://keycloak:8080"
KEYCLOAK_CLIENT_ID = "django_api"




